{"version":3,"sources":["Components/Note.js","services/notes.js","Components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","axios","get","then","response","data","newObject","post","id","put","Notification","message","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","notesServices","notesToShow","filter","map","i","key","find","n","changedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","returnedNote","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"gNAkBeA,EAhBH,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACZC,EAAQF,EAAKG,UACjB,qBAAuB,iBAEvB,OACE,wBAAIC,UAAU,QACZ,4BACCJ,EAAKK,SAEN,wBAAID,UAAU,UACd,4BAAQE,QAASL,GAAmBC,M,gBCQ7B,EAjBA,WAEX,OADgBK,IAAMC,IAHV,cAIGC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAe9B,EAZA,SAAAC,GAEX,OADgBL,IAAMM,KARV,aAQwBD,GACrBH,MAAK,SAAAC,GAChB,OAAOA,EAASC,SAST,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAfJ,aAeI,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCJ9BK,EAXM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAgB,OAAZA,EACO,KAIP,yBAAKb,UAAU,SACVa,ICoFEC,EAxFH,SAACC,GAAW,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,OAEWF,mBAAS,IAFpB,mBAEZG,EAFY,KAEHC,EAFG,OAGWJ,oBAAS,GAHpB,mBAGZK,EAHY,KAGHC,EAHG,OAIqBN,mBAAS,MAJ9B,mBAIZO,EAJY,KAIEC,EAJF,KAMnBC,qBAAW,WACPC,IAEKrB,MAAK,SAAAC,GACFY,EAASZ,QAElB,IAEH,IAyCMqB,EAAcN,EACdJ,EACAA,EAAMW,QAAO,SAAAhC,GAAI,OAAIA,EAAKG,aAEhC,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcc,QAASU,IACvB,yBAAKvB,UAAU,QACX,4BAAQE,QAAS,kBAAMoB,GAAYD,KAAnC,OACSA,EAAU,aAAe,SAGtC,+BAAO,+BACJM,EAAYE,KAAI,SAACjC,EAAMkC,GAAP,OACf,kBAAC,EAAD,CACIC,IAAKD,EACLlC,KAAMA,EACNC,iBAAkB,kBA3CH,SAACa,GACxB,IAAMd,EAAOqB,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAEvB,KAAOA,KAChCwB,EAAW,2BAAOtC,GAAP,IAAaG,WAAYH,EAAKG,YAE/C2B,EACYhB,EAAIwB,GACX7B,MAAK,SAAAC,GACFY,EAASD,EAAMY,KAAI,SAAAjC,GAAI,OACnBA,EAAKc,KAAOA,EAAKd,EAAOU,SAE/B6B,OAAM,SAAAC,GACHZ,EAAgB,aAAD,OACF5B,EAAKK,QADH,wDAInBoC,YAAW,WACPb,EAAgB,QACjB,KACHN,EAASD,EAAMW,QAAO,SAAAK,GAAC,OAAIA,EAAEvB,KAAOA,SAyBR4B,CAAmB1C,EAAKc,YAIxD,0BAAM6B,SA/DK,SAAAC,GACXA,EAAMC,iBACN,IAAMC,EAAa,CACfzC,QAASkB,EACTwB,MAAM,IAAIC,MAAOC,cACjB9C,UAAW+C,KAAKC,SAAW,GAC3BrC,GAAIO,EAAM+B,OAAS,GAEvBtB,EACYgB,GACPrC,MAAK,SAAA4C,GACF/B,EAASD,EAAMiC,OAAOD,IACtB7B,EAAW,SAoDf,2BACI+B,MAAOhC,EACPiC,SA7Ba,SAACZ,GACtBpB,EAAWoB,EAAMa,OAAOF,UA8BpB,4BAAQG,KAAK,UAAb,W,MClFZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.feb902be.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note =({note, toggleImportance}) => {\r\n  const label = note.important\r\n  ? \"make not important\" : \"make important\"\r\n\r\n    return(\r\n      <tr className='note'>\r\n        <td>\r\n        {note.content}\r\n        </td>\r\n        <td className='button'>\r\n        <button onClick={toggleImportance}>{label}</button>\r\n        </td>\r\n      </tr>\r\n    )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () =>{\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data) \r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response =>{ \r\n        return response.data\r\n    })\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, update}","import React from 'react'\r\n\r\nconst Notification = ({message}) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n    \r\n    return (\r\n        <div className='error'>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\nexport default Notification","import React,{useState, useEffect} from 'react'\r\nimport Note from './Components/Note'\r\nimport notesServices from './services/notes'\r\nimport Notification from './Components/Notification'\r\n\r\nconst App = (props) => {\r\n    const [notes, setNotes] = useState([])\r\n    const [newNote, setNewNote] = useState(\"\")\r\n    const [showAll, setShowAll] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n    useEffect (() => {\r\n        notesServices\r\n            .getAll()\r\n            .then(response => {\r\n                setNotes(response)\r\n        })\r\n    }, [])\r\n\r\n    const addNOte =event =>{\r\n        event.preventDefault()\r\n        const noteObject = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() > 0.5,\r\n            id: notes.length + 1\r\n        }\r\n        notesServices\r\n            .create(noteObject)\r\n            .then(returnedNote => {\r\n                setNotes(notes.concat(returnedNote))\r\n                setNewNote(\"\")\r\n            })\r\n    }\r\n\r\n    const toggleImportanceOf = (id) => {\r\n        const note = notes.find(n => n.id === id)\r\n        const changedNote = {...note, important: !note.important}\r\n\r\n        notesServices\r\n            .update(id, changedNote)\r\n            .then(response => {\r\n                setNotes(notes.map(note => \r\n                    note.id !== id ? note : response))\r\n            })  \r\n            .catch(error => {\r\n                setErrorMessage( \r\n                `the note '${note.content}' was already \r\n                deleted from server`\r\n            )\r\n            setTimeout(() => {\r\n                setErrorMessage(null)\r\n            }, 10000)\r\n            setNotes(notes.filter(n => n.id !== id))\r\n            })\r\n    }\r\n    const handleNoteChange = (event) => {\r\n        setNewNote(event.target.value)\r\n    }\r\n\r\n    const notesToShow = showAll \r\n        ? notes \r\n        : notes.filter(note => note.important)\r\n\r\n    return (\r\n      <div>\r\n        <h1>Notes</h1>\r\n        <Notification message={errorMessage}/>\r\n        <div className='show'>\r\n            <button onClick={() => setShowAll(!showAll)}>\r\n                show{showAll ? ' important' : ' all'}\r\n            </button>\r\n        </div>\r\n        <table><tbody>\r\n          {notesToShow.map((note, i) => \r\n            <Note \r\n                key={i} \r\n                note={note} \r\n                toggleImportance={() => toggleImportanceOf(note.id)}\r\n            />\r\n          )}\r\n        </tbody></table>\r\n        <form onSubmit={addNOte}>\r\n            <input \r\n                value={newNote}\r\n                onChange={handleNoteChange}\r\n            />\r\n            <button type=\"submit\">save</button>\r\n        </form>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from \"./App\"\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById(\"root\"))"],"sourceRoot":""}